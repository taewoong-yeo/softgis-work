package softGis.mail;

import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import softGis.auth.AuthService;
import softGis.auth.UserVO;


@Controller
@RequestMapping(value="/mail")
public class MailController {
	
	@Resource(name="mailService")
	public MailService mailService;
	
	@Resource(name="authService")
	public AuthService authService;
	
	private final String URI_1 = "/mail";
	private final String URI_2 = "/mailAuthentication.do";
	
	public String getMailUri(int depth) {
		String uri = "";
		switch(depth) {
		case 1: uri = URI_1;
			break;
		case 2: uri = URI_2;
			break;
		default:
			break;
		}
		return uri;
	}
	
	@RequestMapping(value=URI_2)
	public String mailAuthentication(HttpServletRequest request, @RequestParam Map<String, Object> paramMap) {
		
		String icon = "info";
		String type = "close";
		String title = null, msg = null;
		
		boolean has_key = (boolean)paramMap.containsKey("key");
		
		if( !has_key ) {
			msg = "메일 인증 진행 중 장애가 발생했습니다.\\n시스템 관리자에게 문의바랍니다.";
		}else {
			
			icon = "success";
			msg = "인증이 완료되었습니다.\\n회원가입을 계속 진행해주세요.";
    		//인증 완료 세션 처리
    		request.getSession().setAttribute("key", paramMap.get("key"));
		}
		
		request.setAttribute("icon", icon);
		request.setAttribute("message", msg);
		request.setAttribute("type", type);
		
		return "forward:/redirect.do";
	}
	
	@RequestMapping(value="/sendMail.do", method=RequestMethod.POST)
	public String sendMail(HttpServletRequest request, @RequestParam Map<String, Object> paramMap, ModelMap model) {

		UserVO user = (UserVO) authService.registerCollisionCheck(paramMap);
		
		if(user != null) {
			request.getSession().invalidate();
			model.addAttribute("result", false);
			model.addAttribute("msg", "이미 가입된 계정입니다.");
		}else {
			boolean authResult = (boolean) mailService.sendMail(request, paramMap);
			model.addAttribute("result", authResult);
		}
		
		return "jsonString";
	}
	
	@RequestMapping(value="/certCheck.do", method=RequestMethod.POST)
	public String certCheck(HttpServletRequest request, @RequestParam Map<String, Object> paramMap, ModelMap model) {
		String key = (String) request.getSession().getAttribute("key");
		boolean certYn = key != null && !"".equals("key") ? true : false;
		model.addAttribute("result", certYn);
		
		return "jsonString";
	}

}