package softGis.mail;

import java.io.UnsupportedEncodingException;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.activation.CommandMap;
import javax.activation.MailcapCommandMap;
import javax.annotation.Resource;
import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import softGis.core.Encrypter;

@Service("mailService")
public class MailService {
	
	@Value("${mail.host}")
	private String smtp_host;
	
	@Value("${mail.id}")
	private String smtp_id;
	
	@Value("${mail.pwd}")
	private String smtp_pwd;
	
	@Value("${mail.sender}")
	private String smtp_sender;
	
	MailController mcon = new MailController();

	private String URI_1 = mcon.getMailUri(1);
	private String URI_2 = mcon.getMailUri(2);
	
	public boolean sendMail(HttpServletRequest request, Map<String, Object> paramMap) {
		
		String m_name = "LX";
		
		// smtp 포트
		String m_port_587 = "587";
		String m_port_465 = "465";
		
		//구글 smtp
		String m_host = smtp_host;
		
		String authParams = "";
		String TO_ADDR = "";
		String userNm = "";
		
		String key = Encrypter.encrypt("MD5", paramMap.get("newUserPatternKey").toString());
		if(!(paramMap.containsKey("newUserPatternKey") && paramMap.containsKey("mail") && paramMap.containsKey("user_nm"))) {
			return false;
		}else {
//			String key = paramMap.get("newUserPatternKey").toString();
			userNm = paramMap.get("user_nm").toString();
			authParams = URI_1 + URI_2 + "?key=" + key+"&mail="+paramMap.get("mail"); 
			TO_ADDR = paramMap.get("mail").toString();
		}
		
		String fullURL = request.getRequestURL().toString();
		String contextPath = request.getContextPath();
		String URLexceptURI = fullURL.replace(request.getRequestURI(), "");
		
		boolean r = false;
		
		String mailAddr = smtp_id;
		String mailSender = smtp_sender;
		String mailPwd = smtp_pwd;
				
		String url = URLexceptURI+contextPath+authParams;
		
		StringBuffer sb = new StringBuffer();
		sb.append("<div style=\"text-align:center; padding: 2rem; line-height:170%; font-family: Malgun Gothic;\">");
		sb.append("<div style=\"display:inline-block;width:500px;\">");
		sb.append("<div style=\"height: 57px; margin: 0.5rem 0 0.5rem 0; padding: 1.5rem;border-bottom:7px solid #00b8a3;display:flex;\">");
		sb.append("<img src=\"https://www.lx.or.kr/images/kor/content/cibi_slogan01.png\" height=100%;></img></div>");
		sb.append("<div style=\"background-color:#fff; padding: 2rem 1rem 1rem 1.5rem;\">");
		sb.append("<h3 style=\"padding-bottom: 0.5rem;font-size:21px;\">");
		sb.append("<img src=\"https://landnavi.com/assets/images/login/exp.png\" height=100%;></img></h3></div>");
		sb.append("<div style=\"margin-bottom: 50px; font-size: 25px;\"><span style=\"color:#00b8a3;\">메일인증</span> 안내입니다.</div>");
		sb.append("<div style=\"text-align:left;font-size: 15px;\">");
		sb.append("<div style=\"padding: 0.2rem 0 0.2rem 0;\">안녕하세요 <strong>"+userNm+"</strong>님</div>");
		sb.append("<div style=\"padding: 0.2rem 0 0.2rem 0;\">LX softGIS 플랫폼을 이용해 주셔서 감사합니다.</div>");
		sb.append("<div style=\"padding: 0.2rem 0 0.2rem 0;\"><span style=\"color:#00b8a3;\">이메일 인증</span>을 하시려는 경우, 아래 버튼을 클릭해주세요.</div>");
		sb.append("<div style=\"padding: 0.2rem 0 0.2rem 0;\">감사합니다.</div>");
		sb.append("</div>");
		sb.append("<a href=\""+url+"\"");
		sb.append("style=\"text-decoration: none; background-color: #00b8a3; color:white;");
		sb.append("padding:10px 20px 10px 20px;");
		sb.append("margin: 1rem 0 0 0; display:inline-block; border-radius: 10px; transition:all 0.1s;");
		sb.append("font-weight: 700; font-size: 15px; width: 250px;\">회원 가입 인증</a>");
		sb.append("<div style=\"margin: 70px 0px;border-top: 1px solid #D5D5D5;padding-top: 10px;text-align: right;color: #8D8D8D;\">본 메일은 발신전용 입니다.</div></div>");
		
		String htmlStr = sb.toString(); 
		
		Properties prop = new Properties();
		
		// port: 587
		prop.put("mail.smtp.host", m_host); // v
		prop.put("mail.smtp.auth", "true");
		prop.put("mail.smtp.port", m_port_587); // v
		prop.put("mail.smtp.socketFactory.port" , "587");		
		prop.put("mail.smtp.starttls.enable", "true");
		
//		prop.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
//		prop.put("mail.debug","true");
//		prop.put("mail.transport.protocol.rfc822", "smtps");
		
		// port: 465
//		prop.put("mail.smtp.user", mailAddr); // v
//		prop.put("mail.smtp.host", m_host); // v
//		prop.put("mail.smtp.port", m_port_465); // v
//		prop.put("mail.smtp.auth", "true"); // v
//		prop.put("mail.smtp.debug", "true"); // v
//		prop.put("mail.smtp.ssl.enable", "true");
//		prop.put("mail.smtp.ssl.trust", m_host);
//		prop.put("mail.smtp.socketFactory.port", m_port_465); // v
//		prop.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory"); // v
//		prop.put("mail.smtp.socketFactory.fallback", "false"); // v
		
		Authenticator auth = new javax.mail.Authenticator() {
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(mailAddr, mailPwd);
			}
		};
		
		Session session = Session.getDefaultInstance(prop, auth);
		session.setDebug(true);
		
		try {
            MimeMessage message = new MimeMessage(session);
            message.setFrom(new InternetAddress(mailAddr, mailSender));

            // recipient address
            message.addRecipient(Message.RecipientType.TO, new InternetAddress(TO_ADDR)); 

            // Subject / Date
            message.setSubject("[ TO. "+userNm+" 님 ] LX softGIS 회원 가입 인증 메일");
            message.setSentDate(new Date());
            
            // main content
            Multipart multiPart = new MimeMultipart();
            MimeBodyPart mimeBody = new MimeBodyPart();
            mimeBody.setText(htmlStr, "UTF-8", "html");
            multiPart.addBodyPart(mimeBody);
            message.setContent(multiPart);
            
            // mime type setting
            MailcapCommandMap mailCmdMap = (MailcapCommandMap) CommandMap.getDefaultCommandMap();
            mailCmdMap.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
            mailCmdMap.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
            mailCmdMap.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
            mailCmdMap.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
            mailCmdMap.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
            CommandMap.setDefaultCommandMap(mailCmdMap);
            
            // port: 587 - send
            Transport transport = session.getTransport("smtp");
            transport.connect(m_host, mailAddr, mailPwd);
            transport.sendMessage(message, message.getAllRecipients());
            transport.close();
            
            // port: 465 - send
            // Transport.send(message); 
            
            // must be undermost (반드시 최하단에 위치시킬 것.)
            r = true;
            System.out.println("message sent successfully...");
        }catch (AddressException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }catch (MessagingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return r;
		
	}
	
}
