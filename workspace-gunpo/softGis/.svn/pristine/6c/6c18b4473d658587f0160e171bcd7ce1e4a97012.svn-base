package softGis.core;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.stereotype.Service;

import egovframework.rte.fdl.cmmn.EgovAbstractServiceImpl;

@Service("coreService")
public class CoreService extends EgovAbstractServiceImpl {
	
	private static final Log log = LogFactory.getLog(CoreService.class);
	
	@Resource(name="coreDAO")
	public CoreDAO coreDAO;
	
	@Resource(name="coreService")
	private CoreService coreService;
	
    public List<Object> getCodesForInterceptor(Map<String, Object> paramMap) {
    	return coreDAO.getCodesForInterceptor(paramMap);
    }

	public boolean publishTextDataToDatabase(String[] columns, List<Map<String, Object>> datas, String schemaName, String tableName) {
		return this.publishTextDataToDatabase(columns, datas, schemaName, tableName, null, null);
	}

	public boolean publishTextDataToDatabase(String[] columns, List<Map<String, Object>> datas, String schemaName, String tableName, Date date, String dateCycleType) {
		String[] rmComma = new String[columns.length];
		int rmCommaIdx = 0;
		for (String col : columns) {
			rmComma[rmCommaIdx] = col.replaceAll("\"", "");
			rmCommaIdx += 1;
		}
		
		Map<String, Object> map = new HashMap<>();
		map.put("schema_nm", schemaName);
		map.put("table_nm", tableName);
		map.put("columns", columns);
		map.put("datas", datas);
		
		if (datas.size() > 0) {
			for (Map<String, Object> item : datas) {
				Iterator<String> iterator = item.keySet().iterator();
				while (iterator.hasNext()) {
					String key = iterator.next().toString();
					String val = (item.get(key) == null ? "" : item.get(key).toString());
					item.replace(key, val.replaceAll("^\"|\"$", ""));
				}
			}
		}

		int create = coreDAO.createTextTable(map);
		int insert = coreDAO.insertTextData(map);
		coreDAO.commentTable(map);
		coreDAO.commentColumn(map);
		
		return create > 0 && insert > 0;
	}
	
	public boolean deleteTextDataFromDatabase(String schemaName, String tableName) throws Exception {
		try {
			this.deleteTable(schemaName, tableName);
		} catch(Exception e) { }
		
		return true;
	}
	
	public boolean getTableExistence(String schemaName, String tableName) {
		Map<String, Object> map = new HashMap<>();
		map.put("schema_nm", schemaName);
		map.put("table_nm", tableName);
		
		return coreDAO.getTableExistence(map);
	}
	
	public int deleteTable(String schemaName, String tableName) {
		Map<String, Object> map = new HashMap<>();
		map.put("schema_nm", schemaName);
		map.put("table_nm", tableName);
		
		return coreDAO.deleteTable(map);
	}

	public int updateImporterCharacterField(String schemaName, String tableName, List<String> fields) {
		Map<String, Object> map = new HashMap<>();
		map.put("schema_nm", schemaName);
		map.put("table_nm", tableName);
		map.put("fields", fields);
		
		return coreDAO.updateImporterCharacterField(map);
	}
	
	public SimpleDateFormat getDateFormat() {
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
		
		return format;
	}
	
	public SimpleDateFormat getDateTimeFormat() {
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault());
		
		return format;
	}
}