import { Validator, VALIDATOR_DATE_REGEX_RULE } from '../shared/validator';
import { DBFParser } from '../shared/shp-parser';

import FileReaderAsync from '../shared/file-reader-async';
import FormAjax from '../shared/form-ajax';
import Loading from '../modules/loading';

const HTML = {
	ADD_BUTTON: `
		<a role="button" class="admin-loader-add">데이터 업로드</a>
		<a role="button" class="admin-loader-edit">컬럼명 한글화</a>
	`,
	DELETE_BUTTON: `
		<a role="button" class="admin-loader-delete">삭제</a>
	`,
	USE_STAT_SWITCH: (v) => `
		<label class="admin-loader-use-stat switch">
			<input type="checkbox" ${v.use_stat === 'Y' ? 'checked' : ''}>
			<span></span>
		</label>
	`,
	GRID: `
		<table class="admin-loader-grid">
			<thead>
				<tr>
					<th data-field="data_tbl">테이블명</th>
					<th data-field="data_date">기준일자</th>
					<th data-field="use_stat" data-fit>사용여부</th>
					<th></th>
				</tr>
			</thead>
			<tbody></tbody>
		</table>
	`,
	DIALOG: (t) => `
		<form class="form">
			<div class="row row-hspace-1">
				<div class="form-field col-6">
					<label for="data_date" class="form-required">기준일자</label>
					<input type="date" name="data_date" id="data_date" placeholder="기준일자">
				</div>
				<div class="form-field col-6">
					<label for="data_file" class="form-required">파일 (${t})</label>
					<input type="file" name="data_file" id="data_file" placeholder="파일" accept="${t}">
					${t == '.zip' ? '<div class="u-text-primary u-margin-top-1">※ 스타일(.sld)을 같이 압축하여 업로드 해 주십시오.</div>' : ''}
				</div>
			</div>
			<div class="form-field form-field-inline">
				<label for="use_stat">사용여부</label>
				<label for="use_stat" class="switch"><input type="checkbox" id="use_stat" name="use_stat" checked><span></span></label>
			</div>
		</form>
	`
};

class AdminDataLoader {
	constructor(opts = {}) {
		if(opts.manager === undefined)
			throw new ReferenceError('Invaild admin data manager object');

		if(opts.$element === undefined)
			throw new ReferenceError('Invaild target element');

		if(typeof(opts.urls) !== 'object'
			|| opts.urls.get === undefined
			|| opts.urls.insert === undefined
			|| opts.urls.update === undefined
			|| opts.urls.delete === undefined)
			throw new ReferenceError('Invaild URLs');

		if(opts.type === undefined
			|| (opts.type !== 'zip'
			&&  opts.type !== 'csv'
			&&  opts.type !== 'xlsx'))
			throw new ReferenceError('Invaild data type');

		this.manager = opts.manager;

		this.urls = opts.urls;
		this.type = opts.type;

		this.validator = opts.validator || new Validator({});

		this.$element = $(opts.$element);
		this.$grid = undefined;
		this.$dialog = undefined;
		this.$dialogForm = undefined;

		this.formAjax = undefined;

		this.formAjaxOption = opts.formAjaxOption;
		this.kendoGridOption = opts.kendoGridOption;
		this.kendoDialogOption = opts.kendoDialogOption;

		this.init();
	}

	get grid() {
		return this.$grid.data('kendoGrid');
	}

	get dialog() {
		return this.$dialog.data('kendoDialog');
	}

	init() {
		this.initGrid();
		this.initDialog();
		this.initDialogForm();

		this.$element.on('click', '.admin-loader-add', onAddButtonClick.bind(this));
		this.$element.on('click', '.admin-loader-delete', onDeleteButtonClick.bind(this));
		this.$element.on('click', '.admin-loader-use-stat', onUseStatSwitchClick.bind(this));
		this.manager.grid.bind('change', onManagerGridChange.bind(this));

		function onAddButtonClick(e) {
			e.preventDefault();

			const $this = $(e.currentTarget);

			if($this.hasClass('active')) {
				this.$dialogForm.reset();

				this.dialog.open();
			}
		}

		async function onDeleteButtonClick(e) {
			e.preventDefault();

			if(!confirm('정말 삭제하시겠습니까?'))
				return;

			const $this = $(e.currentTarget);
			const $row = $this.closest('tr');

			const rowData = this.grid.dataItem($row).toJSON();
			const mergedData = $.extend({}, this.manager.currentRowData, rowData);

			Loading.showGlobal();

			try {
				await $.post(this.urls.delete, mergedData);

				alert('삭제가 완료되었습니다.');

				this.grid.dataSource.read();
			} finally {
				Loading.hide();
			}
		}

		async function onUseStatSwitchClick(e) {
			const $this = $(e.currentTarget);
			const $row = $this.closest('tr');
			const $input = $this.find('input');

			const rowData = this.grid.dataItem($row);

			const useStat = $input.prop('checked') ? 'Y' : 'N';

			rowData.use_stat = useStat;

			Loading.show();

			try {
				await $.post(this.urls.update, rowData.toJSON());
			} finally {
				Loading.hide();
			}
		}

		function onManagerGridChange(e) {
			const getGridButton = () => this.$element.find('.admin-loader-add');

			this.grid.dataSource.page(1);

			if(this.manager.currentRowData) {
				this.grid.setOptions({
					dataSource: {
						transport: {
							read: {
								data: this.manager.currentRowData
							}
						}
					}
				});

				getGridButton().addClass('active');
			} else {
				this.grid.dataSource.online(false);
				this.grid.dataSource.data([]);

				getGridButton().removeClass('active');
			}
		}
	}

	initGrid() {
		this.$element.html(HTML.GRID);

		const kendoGridOption = {
			selectable: false,
			pageable: {
				refresh: false,
				pageSizes: false,
				buttonCount: 5
			},
			toolbar: [
				{ template: HTML.ADD_BUTTON }
			],
			columns: [
				{ field: 'data_tbl', title: '테이블명' },
				{ field: 'data_date', title: '기준일자' },
				{ field: 'use_stat', title: '사용여부', template: HTML.USE_STAT_SWITCH },
				{ template: HTML.DELETE_BUTTON, width: 30 }
			],
			dataSource: {
				pageSize: 10,
				transport: {
					read: {
						url: this.urls.get
					}
				}
			}
		};

		const $grid = this.$element.find('.admin-loader-grid');

		this.$grid = $grid;
		this.$grid.kendoGrid($.extend(true, {}, Constant.KENDO_DEFAULT_GRID_OPTION, kendoGridOption, this.kendoGridOption));

		this.grid.dataSource.data([]);
	}

	initDialog() {
		let typeName = '';

		switch(this.type) {
			case 'csv': typeName = '.csv'; break;
			case 'xlsx': typeName = '.xlsx'; break;
			case 'zip': typeName = '.zip'; break;
		}

		const kendoDialogOption = {
			title: '데이터 업로드',
			actions: [
				{ text: '취소' },
				{ text: '업로드', primary: true, action: e => { this.submit(); return false; }}
			]
		};

		const $dialog = $('<div class="admin-loader-dialog"/>');
		$dialog.appendTo($('body'));
		$dialog.html(HTML.DIALOG(typeName));
		$dialog.kendoDialog($.extend(true, {}, Constant.KENDO_DEFAULT_DIALOG_OPTION, kendoDialogOption, this.kendoDialogOption));

		this.$dialog = $dialog;
	}

	initDialogForm() {
		const $form = this.$dialog.find('form');

		const formAjaxOption = {
			url: this.urls.insert,
			validator: this.validator,
			method: 'POST',
			overrideSubmitEvent: false,
			fieldNames: {
				data_date: '기준일자',
				data_file: '파일'
			}
		};

		const formAjax = new FormAjax($form, $.extend(true, {}, formAjaxOption, this.formAjaxOption));

		$form.find('input[type="date"]').kendoDatePicker(Constant.KENDO_DEFAULT_DATEPICKER_OPTION);

		this.$dialogForm = $form;

		this.formAjax = formAjax;
	}

	async submit() {
		const $file = this.$dialogForm.find('input[type="file"]');

		let rowObj, formObj = this.$dialogForm.serializeFlat();

		rowObj = this.formAjax.getMappingFormData(this.manager.currentRowData);
		formObj = this.formAjax.getMappingFormData(formObj);

		this.formAjax.validator.fieldNames = this.formAjax.fieldNames;
		this.formAjax.validator.rules = $.extend(true, {
			data_date: { required: true, regex: VALIDATOR_DATE_REGEX_RULE },
			data_file: { required: true }
		}, this.formAjax.validator.rules);

		if(!await this.formAjax.validator.validateAllAsync(formObj))
			return;

		if(!confirm('데이터 업로드는 시간이 오래 걸리는 작업입니다.\n업로드 중에는 창을 닫거나 이동할 수 없습니다.\n진행하시겠습니까?'))
			return;

		const formData = new FormData();
		const reader = new FileReaderAsync();

		Loading.showGlobal();

		try {
			const file = $file.get(0).files[0];

			for(const i in rowObj) {
				formData.append(i, rowObj[i]);
			}

			formData.set('data_file', file);
			formData.set('data_date', formObj.data_date);
			formData.set('use_stat', formObj.use_stat);

			try {
				switch(this.type) {
					case 'zip':
						const fileBinary = await reader.readAsArrayBuffer(file);

						const zip = await JSZip.loadAsync(fileBinary);

						try {
							const dbf = zip.file(/.dbf$/i)[0];
							const dbfBinary = await dbf.async('arraybuffer');
							const dbfResult = new DBFParser().parse(dbfBinary, dbf.name);
							const dbfCharFields = dbfResult.fields.filter(f => f.type === 'C').map(f => f.name);

							formData.set('data_dbf', JSON.stringify(dbfCharFields));
						} catch(e) {
							alert('ZIP 파일 안에 DBF 파일이 손상되었거나 존재하지 않습니다.');
							return;
						}

						try {
							const sld = zip.file(/.sld$/i)[0];
							const sldString = await sld.async('string');

							formData.set('data_sld', sldString);
						} catch(e) {
							alert('ZIP 파일 안에 SLD 파일이 손상되었거나 존재하지 않습니다.');
							return;
						}
						break;

					case 'csv':
						const fileText = await reader.readAsText(file);
						const fileArray = fileText.split('\n').map(v => v.split(','));
						const fileIntegrity = fileArray.map(v => v.length).filter((v, i, a) => a.indexOf(v) === i);

						//if(fileIntegrity.length !== 1) throw new RangeError;
						break;
					
					case 'xlsx':
						break;
				}
			} catch(e) {
				alert('파일을 읽는 중에 오류가 발생하였습니다.\n확인 후 다시 시도해주세요.');
				return;
			}

			this.formAjax.ajaxOption = {
				contentType: false,
				processData: false,
				data: formData
			};

			await this.formAjax.submit();

			alert('업로드가 완료되었습니다.');

			this.grid.dataSource.read();

			this.dialog.close();
		} finally {
			Loading.hide();
		}
	}
}

export default AdminDataLoader;